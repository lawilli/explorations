---
layout: post
title:  "Dolphin"
date:   2015-12-18 23:42:45
tags: dolphin emulator
---

This document attempts to heighten understanding of the Dolphin emulator as well as mechanisms of the emulator that can be manipulated for the purpose of implementing a neural net.

Dolphin source code was obtained by git cloning the repository on GitHub [1]. The operating system being used is Mac OS X El Capitan. Dolphin uses CMake and Makefiles for building the application on Mac OS X.

{% highlight sh %}
$ cd dolphin
$ mkdir build
$ cd build
$ cmake ..
$ make
{% endhighlight %}

After running these commands, the Dolphin App is generated. Dolphin can be executed in debug mode by running:

{% highlight sh %}
$ ./Binaries/Dolphin.app/Contents/MacOS/Dolphin -d
{% endhighlight %}

### Next

In order to obtain data corresponding to the feature set of the neural network some exploration is required to identify relevant locales for code injection.

Upon glance of the Dolphin Graphical User Interface (GUI), some controls are apparent.


<!-- ![alt text]({{site.url}}} "Logo Title Text 1") -->
![My helpful screenshot]({{ site.url }}/images/P1.png)

* Pause/Play: Pauses/resumes emulation
* Stop: Stops emulation

The code for setting these labels can be located by recursively searching the `Source\Core` directory for files containing pattern matches in which the text of the label is a pattern.

{% highlight sh %}
$ grep -rl \"Pause\" .
{% endhighlight %}

The above command outputs all of the

{% highlight text %}
./DolphinQt/MainWindow.cpp
./DolphinWX/Debugger/DebuggerPanel.cpp
./DolphinWX/Debugger/DSPDebugWindow.cpp
./DolphinWX/FrameTools.cpp
./DolphinWX/WXInputBase.cpp
{% endhighlight %}

There are several files containing matches for the pattern `\"Pause\"`.

{% highlight sh %}
$ grep -rl \"FullScr\" .
{% endhighlight %}


{% highlight text %}
./DolphinWX/FrameTools.cpp
{% endhighlight %}

There is one match for `./DolphinWX/FrameTools.cpp` which is also in the returned set for the pattern \"Pause\".


The Dolphin emulator provides a feature for dumping the hexadecimal contents of emulated hardware virtual memory. When running in *debug* mode, the *Memory Window* portion of the GUI has buttons labeled

* Dump MRAM

* Dump EXRAM

* Dump FakeVMEM

{% highlight sh %}
$ grep -rl \"Dump\ MRAM\" .
{% endhighlight %}

{% highlight sh %}
./DolphinWX/Debugger/MemoryWindow.cpp
{% endhighlight %}

### MemoryWindow

{% highlight cpp %}
dump_sizer->Add(new wxButton(this, IDM_DUMP_MEMORY, _("Dump MRAM")), 0, wxEXPAND);
{% endhighlight %}

`IDM_DUMP_MEMORY` is an `enum` value, set in `MemoryWindow.cpp`.

{% highlight cpp %}
enum
{
    ...
    IDM_SETVALBUTTON,
    IDM_DUMP_MEMORY,
    IDM_DUMP_MEM2,
    IDM_DUMP_FAKEVMEM,
    ...
};
{% endhighlight %}

[Event Tables](https://wiki.wxwidgets.org/Events#Event_Tables)

{% highlight cpp %}
BEGIN_EVENT_TABLE(CMemoryWindow, wxPanel)
    ...
    EVT_BUTTON(IDM_SETVALBUTTON,    CMemoryWindow::SetMemoryValue)
    EVT_BUTTON(IDM_DUMP_MEMORY,     CMemoryWindow::OnDumpMemory)
    EVT_BUTTON(IDM_DUMP_MEM2,       CMemoryWindow::OnDumpMem2)
    EVT_BUTTON(IDM_DUMP_FAKEVMEM,   CMemoryWindow::OnDumpFakeVMEM)
    ...
END_EVENT_TABLE()
{% endhighlight %}

{% highlight cpp %}
void CMemoryWindow::OnDumpMemory( wxCommandEvent& event )
{
    // DumpArray(File::GetUserPath(F_RAMDUMP_IDX), Memory::m_pRAM, 8);
    DumpArray(File::GetUserPath(F_RAMDUMP_IDX), Memory::m_pRAM, Memory::REALRAM_SIZE);
}
{% endhighlight %}

`F_RAMDUMP_IDX` is an `enum` value defined in `Common/FileUtil.h`.

{% highlight cpp %}
// Source/Core/Common/FileUtil.h
...
enum {
	...
	F_RAMDUMP_IDX,
	F_ARAMDUMP_IDX,
	F_FAKEVMEMDUMP_IDX,
    ...
};
{% endhighlight %}

{% highlight c %}
#include <execinfo.h>
#include <stdio.h>
    ...
    void* callstack[128];
    int i, frames = backtrace(callstack, 128);
    char** strs = backtrace_symbols(callstack, frames);
    for (i = 0; i < frames; ++i) {
        printf("%s\n", strs[i]);
    }
    free(strs);
    ...

{% endhighlight %}












{% highlight cpp %}
// Source/Core/Common/BreadCrumb.h

#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <time.h>

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"

class BreadCrumb
{
public:
    static void breadcrumb(const char *file, const char *fun, int line) {

        time_t rawtime;
        struct tm * timeinfo;
        time(&rawtime);
        timeinfo = localtime(&rawtime);

        // formatted time string
        char *t = asctime(timeinfo);

        // asctime strings have newline
        BreadCrumb::chomp(t);

        printf("%sFROM(%s): %s%s %s%s %s%d %s\n", KYEL, t, KWHT, path(file), KCYN, fun, KGRN, line, KNRM);
    }

private:
    static void chomp(char *line) {
        char *hold = (char*) memchr(line, '\n', 30);
        if (hold)
            *hold = '\0';
    }
    static char* path(const char *line) {
        return strstr(line, "Source");
    }
};
{% endhighlight %}



{% highlight cpp %}
// Source/Core/Common/BreadCrumb.cpp

#include "BreadCrumb.h"
{% endhighlight %}
{% highlight cmake %}
# Source/Core/Common/CMakeLists.txt

set(SRCS BreadCrumb.cpp
         BreakPoints.cpp
         # ...
{% endhighlight %}


![alt text]({{site.url}}/images/BreadCrumb.png "Logo Title Text 1")
![alt text]({{site.url}}/images/P1.png "P1")
![alt text]({{site.url}}/images/P2.png "P2")
![alt text]({{site.url}}/images/P3.png "P3")

![alt text]({{site.url}}/images/P6.png "P6")


----
### Works Cited
